categories:
- Programming/By Language/Racket
- Programming/By Language/Scheme
comments: true
date: 2012-09-16 14:00:02
layout: post
title: A needle in a Pi-stack
---
Recently I've been watching a lot of <a href="http://www.youtube.com/user/vihart" title="YouTube: Vi Hart">Vi Hart's videos</a> on YouTube. If you haven't had a chance to check them out, you really should. She has a great way of explaining things (particularly mathematical things) in an easy to understand and amusing way.

One video in particular struck my fancy: <a href="http://www.youtube.com/watch?v=uXoh6vi6J5U" title="YouTube: Vi Hart's Are Shakespeare's Plays Embedded in Pi?">Are Shakespeare's Plays Embedded in Pi?</a> The basic idea is a combination of the @wikipedia["Infinite Monkeys Theorem"]{Infinite monkeys} (the theory that an given an infinite number of monkeys and an infinite amount of time you will reproduce all of the works of Shakespeare) and the fact that Pi is infinitely long, every sequence of numbers will eventually be represented.

<!--more-->

It's a little bit more complicated than that (as explained in the video) as it hasn't actually been proven yet that Pi is a @wikipedia{normal number}--one where every possible sequence of digits of a given length is equally probable. Why would that matter? Well in a normal number, all possible sequences will eventually be represented. In a non-normal number, that is not guaranteed. In any case, we're going to work with the assumption that pi is normal.

So that's the goal. Given a sequence of digits, find it in pi. First, we need to be able to generate the digits of pi. For this, one can either work with algorithms that can generate pi with a given accuracy or we can iteratively generate a sequence of digits (called a @wikipedia{spigot algorithm}). I'll do the latter, based on code from <a href="http://rosettacode.org/wiki/Pi#Python" title="Rosetta Code: Pi">Rosetta code</a> (the Python version in specific). The Python version uses generators so we'll be doing the same (using <a href="http://racket-lang.org/" title="The Racket Language">Racket</a> rather than <a href="http://www.scheme.com/" title="(chez (chez scheme))">Chez Scheme</a> for once).

If you want the entire source code, you can download it here: <a href='https://github.com/jpverkamp/small-projects/blob/master/blog/find-in-pi.rkt'>find-in-pi source code</a>

@codeblock["scheme"]|{
(require racket/generator)

(define (make-pi-spigot)
  (generator ()
    (let loop ([q 1] [r 0] [t 1] [k 1] [n 3] [l 3])
      (if (< (- (+ (* 4 q) r) t) (* n t))
          (begin
            (yield n)
            (loop (* 10 q)
                  (* 10 (- r (* n t)))
                  t
                  k
                  (- (quotient (* 10 (+ (* 3 q) r)) t) (* 10 n))
                  l))
          (loop (* q k)
                (* (+ (* 2 q) r) l)
                (* t l)
                (+ k 1)
                (quotient (+ (* q (+ (* 7 k) 2)) (* r l)) (* t l))
                (+ l 2))))))
}|

Simple enough to use, we can use Racket's @racket-doc{for} to generate a list of n digits of pi or to convert the same to a string:

@codeblock["scheme"]|{
(define (digits-of-pi n)
  (for/list ([i (in-range (+ n 1))]
             [d (in-producer (make-pi-spigot) #f)])
    d))

(define (pi->string n)
  (string-append
   "3."
   (apply
    string-append
    (map number->string (cdr (digits-of-pi n))))))

> (digits-of-pi 10)
'(3 1 4 1 5 9 2 6 5 3 5)

> (pi->string 10)
"3.1415926535"
}|

In any case, it seems to be working well enough so far, so let's write some code that can look for any arbitrary list of digits in pi:

@codeblock["scheme"]|{
(define (find-in-pi ls)
  (let ([pi (make-pi-spigot)])
    (pi) ; skip the 3
    (let loop ([i 1] [l* '()])
      (let* ([d (pi)]
             [l* (map cdr (filter (lambda (ea)
                                    (and (not (null? ea))
                                         (= d (car ea))))
                                  (cons ls l*)))])
        (if (any? null? l*) (- i (length ls)) (loop (+ i 1) l*))))))
}|

Using this, we can find the first time each digit occurs in pi:

@codeblock["scheme"]|{
> (for/list ([i (in-range 10)]) (list i (find-in-pi (list i))))
'((0 31) (1 0) (2 5) (3 8) (4 1) (5 3) (6 6) (7 12) (8 10) (9 4))
}|

Or the first time that longer sequences occur:

@codeblock["scheme"]|{
> (find-in-pi '(1 2 3))
1923

> (find-in-pi '(4 5 6))
250

> (find-in-pi '(0 0 0))
600
}|

Now, let's get crazy and see when @wikipedia["Jenny's number"]{867-5309/Jenny} shows up:

@codeblock["bash"]|{
┌ ☺ verkampj@minty ~/Projects/SmallProjects
└ time ./find-in-pi 8675309

8675309 is 9202591 digits into pi
}|

I added a few more lines to the <a href='https://github.com/jpverkamp/small-projects/blob/master/blog/find-in-pi.rkt'>full source</a> that lets it run from the command line and compiled it with `raco exe find-in-pi.rkt`.

That took a while to run. :)
