categories:
- Programming/By Language/Scheme
- Programming/By Source/Programming Praxis
comments: true
date: 2012-08-27 14:00:36
layout: post
title: 4sum
---
<a title="4SUM" href="http://programmingpraxis.com/2012/08/14/4sum/">One more from Programming Praxis</a>, this time we're dealing with summing combinations of a sequence. More formally, given a secquence S, either choose four elements s<sub>1</sub> through s<sub>4</sub> from S such that s<sub>1</sub>+s<sub>2</sub>+s<sub>3</sub>+s<sub>4</sub> = 0 or verify that it isn't possible. This immediately makes me about working through possible solutions until we find one and then bailing out, ergo @wikipedia{call/cc}:

@codeblock["scheme"]|{
(define (4sum ls)
  (call/cc (lambda (exit) 
    (for-each (lambda (i) 
      (for-each (lambda (j) 
        (for-each (lambda (k) 
          (for-each (lambda (l)
            (when (= 0 (+ i j l k)) 
              (exit (list i j k l))))
            ls))
          ls))
        ls))
      ls)
    (exit #f))))
}|

<!--more-->

It may look funny, but it works great:
<pre>~ (4sum '(2 3 1 0 -4 -1))
 (2 2 0 -4)

~ (4sum '(3 1 0 -4))
 (3 1 0 -4)

~ (4sum '(1 1 1 1))
 #f</pre>
I think that this may have been the first time that I legitimately used call/cc without being told to do so and I have to admit... I'm a convert. It's kind of powerful. (Even if I'm not using a fraction of what I'm capable of.)